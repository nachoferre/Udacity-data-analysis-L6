friend_count_median = median(friend_count),
n = n()) %>%
arrange(age_with_months)
library(dplyr)
pf.fc_by_age_months <- pf %>%
group_by(age_with_months) %>%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
arrange(age_with_months)
pf.fc_by_age_months <- pf %.%
group_by(age_with_months) %.%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %.%
arrange(age_with_months)
pf.fc_by_age_months <- pf %>%
group_by(age_with_months) %>%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
arrange(age_with_months)
pf$age_with_months <- pf$age + (1 - pf$dob_month / 12)
pf.fc_by_age_months <- pf %>%
group_by(age_with_months) %>%
summarise(friend_count_mean = mean(friend_count),
friend_count_median = median(friend_count),
n = n()) %>%
arrange(age_with_months)
head(pf.fc_by_age_months)
age_with_months_groups <- group_by(pf, age_with_months)
pf.fc_by_age_months2 <- summarise(age_with_months_groups,
friend_count_mean = mean(friend_count),
friend_count_median =  median(friend_count),
n = n())
pf.fc_by_age_months2 <- arrange(pf.fc_by_age_months2, age_with_months)
rm(pf.fc_by_age_months2)
ggplot(pf.fc_by_age_months, aes(y=friend_count_mean, x=age_with_months)) +
geom_point(shape=1)
library(ggplot2)
ggplot(pf.fc_by_age_months, aes(y=friend_count_mean, x=age_with_months)) +
geom_point(shape=1)
ggplot(aes(x = age, y = friend_count_mean),
data = subset(pf.fc_by_age, age < 71))+
geom_line()
ggplot(aes(x = age_with_months, y = friend_count_mean),
data = subset(pf.fc_by_age_months, age_with_months < 71))+
geom_line()
ggplot(aes(x = age_with_months, y = friend_count_mean),
data = subset(pf.fc_by_age_months, age_with_months < 71))+
geom_line() +
geom_smooth()
save.image("~/Udacity Data Analisys/Lesson 4/history.RData")
library(dplyr)
age_groups <- group_by(pf, age)
age_groups <- group_by(age_groups, gender)
pf.fc_by_age_gender <- summarise(age_groups,
mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n())
head(pf.fc_by_age_gender)
pf.fc_by_age_gender <- summarise(age_groups,
age = age,
mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n())
head(pf.fc_by_age_gender)
pf.fc_by_age_gender <- summarise(age_groups,
age = age,
mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n())
pf.fc_by_age_gender <- summarise(age_groups,
mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n())
head(pf.fc_by_age_gender)
age_groups <- group_by(age_groups, age, gender)
pf.fc_by_age_gender <- summarise(age_groups,
mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n())
head(pf.fc_by_age_gender)
ggplot(pf.fc_by_age_gender, aes(x = gender, y = ages)) +
geom_line()
library(ggplot2)
ggplot(pf.fc_by_age_gender, aes(x = gender, y = ages)) +
geom_line()
ggplot(pf.fc_by_age_gender, aes(x = gender, y = age)) +
geom_line()
ggplot(pf.fc_by_age_gender, aes(y = gender, x = age)) +
geom_line()
ggplot(pf.fc_by_age_gender, aes(y = median_friend_count, x = age)) +
geom_line()
ggplot(pf.fc_by_age_gender, aes(y = median_friend_count, x = age)) +
geom_line() +
stat_summary(fun.y = mean, geom = "point", shape = 4)
ggplot(pf.fc_by_age_gender, aes(y = median_friend_count, x = age)) +
geom_line(aes(color = gender))
age_groups <- group_by(age_groups, age, gender, is.na(gender))
pf.fc_by_age_gender <- summarise(age_groups,
mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n())
head(pf.fc_by_age_gender)
ggplot(pf.fc_by_age_gender, aes(y = median_friend_count, x = age)) +
geom_line(aes(color = gender))
pf <- na.omit(pf)
age_groups <- group_by(age_groups, age, gender, is.na(gender))
age_groups <- group_by(age_groups, age, gender, is.na(gender))
pf <- read.csv("pseudo_facebook.tsv", sep = "\t")
age_groups <- group_by(age_groups, age, gender, is.na(gender))
age_groups <- group_by(pf, age, gender, is.na(gender))
pf.fc_by_age_gender <- summarise(age_groups,
mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n())
head(pf.fc_by_age_gender)
ggplot(pf.fc_by_age_gender, aes(y = median_friend_count, x = age)) +
geom_line(aes(color = gender))
age_groups <- group_by(pf, age, gender, na.omit(gender))
pf <- na.omit(pf)
age_groups <- group_by(pf, age, gender)
pf.fc_by_age_gender <- summarise(age_groups,
mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n())
ggplot(pf.fc_by_age_gender, aes(y = median_friend_count, x = age)) +
geom_line(aes(color = gender))
install.packages("reshape2")
library(reshape2)
pf.fc_by_age_gender.wide <- dcast(pf.fc_by_age_gender,
age ~ gender,
value.var = 'median_friend_count')
head(pf.fc_by_age_gender.wide)
ggplot(pf.fc_by_age_gender.wide, aes(x = male, y = femle)) +
geom_hline()
ggplot(pf.fc_by_age_gender.wide, aes(x = male, y = femle)) +
geom_hline(yintercept = 1)
ggplot(pf.fc_by_age_gender.wide, aes(y = male, x = femle)) +
geom_hline(yintercept = 1)
ggplot(pf.fc_by_age_gender.wide, aes(y = female/male, x = age)) +
geom_hline(yintercept = 1)
ggplot(pf.fc_by_age_gender.wide, aes(y = female/male, x = age)) +
geom_line() +
geom_hline(yintercept = 1, alpha = 0.3)
pf$years = ceiling(2014 - pf$tenure/365)
pf$year_joined = ceiling(2014 - pf$tenure/365)
summary(pf$year_joined)
table(pf$year_joined)
?cut
aux = cut(pf$year_joined, breaks = 5)
aux
aux = cut(pf$year_joined, breaks = seq(2004, 2014, by = 5))
aux
aux = cut(pf$year_joined, breaks = c(2004, 2009, 2011, 2012, 2014))
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_line(aes(color = year_joined.bucket), stat = "summary", fun.y = median)
library(ggplot2)
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_line(aes(color = year_joined.bucket), stat = "summary", fun.y = median)
pf$year_joined.bucket = cut(pf$year_joined, breaks = c(2004, 2009, 2011, 2012, 2014))
ggplot(data = pf, aes(x = age, y = friend_count)) +
geom_line(aes(color = year_joined.bucket), stat = "summary", fun.y = median)
ggplot(data = subset(pf, !is.na(year_joined.bucket)), aes(x = age, y = friend_count)) +
geom_line(aes(color = year_joined.bucket), stat = "summary", fun.y = median)
ggplot(data = subset(pf, !is.na(year_joined.bucket)), aes(x = age, y = friend_count)) +
geom_line(aes(color = year_joined.bucket), stat = "summary", fun.y = mean) +
geom_line()
ggplot(data = subset(pf, !is.na(year_joined.bucket)), aes(x = age, y = friend_count)) +
geom_line(aes(color = year_joined.bucket), stat = "summary", fun.y = mean)
ggplot(data = subset(pf, !is.na(year_joined.bucket)), aes(x = age, y = friend_count)) +
geom_line(aes(color = year_joined.bucket), stat = "summary", fun.y = mean) +
geom_line(aes(mean(frien_count)))
ggplot(data = subset(pf, !is.na(year_joined.bucket)), aes(x = age, y = friend_count)) +
geom_line(aes(color = year_joined.bucket), stat = "summary", fun.y = mean) +
geom_line(aes(mean(friend_count)))
ggplot(data = subset(pf, !is.na(year_joined.bucket)), aes(x = age, y = friend_count)) +
geom_line(aes(color = year_joined.bucket), stat = "summary", fun.y = mean) +
geom_line(stat = 'summary', fun.y = mean, linetype = 2)
aux <- subset(pf, tenure >= 1)
rate <- pf$friend_count/pf$tenure
median(rate)
rate <- aux$friend_count/aux$tenure
median(rate)
max(rate)
ggplot(data = aux, aes(x = tenure, y = (friendships_initiated/tenure))) +
geom_line(aes(colors(year_joined.bucket)))
length(tenure)
length(aux$tenure)
length(aux$friendships_initiated/aux$tenure)
ggplot(data = aux, aes(x = tenure, y = (friendships_initiated/tenure))) +
geom_line(aes(color(year_joined.bucket)))
ggplot(data = aux, aes(x = tenure, y = (friendships_initiated/tenure))) +
geom_line(aes(color = year_joined.bucket))
ggplot(data = aux, aes(x = tenure, y = (friendships_initiated/tenure))) +
geom_line(aes(color = year_joined.bucket, fun.y = mean))
ggplot(data = aux, aes(x = tenure, y = (friendships_initiated/tenure))) +
geom_line(aes(color = year_joined.bucket), fun.y = mean)
ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
geom_line(aes(color = year_joined.bucket),
stat = 'summary',
fun.y = mean)
ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
geom_smooth(aes(color = year_joined.bucket),
stat = 'summary',
fun.y = mean)
ggplot(aes(x = 7 * round(tenure / 7), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
ggplot(aes(x = 90 * round(tenure / 90), y = friendships_initiated / tenure),
data = subset(pf, tenure > 0)) +
geom_line(aes(color = year_joined.bucket),
stat = "summary",
fun.y = mean)
ggplot(aes(x = tenure, y = friendships_initiated / tenure),
data = subset(pf, tenure >= 1)) +
geom_smooth(aes(color = year_joined.bucket))
View(diamonds)
View(diamonds)
View(age_groups)
pf <- read.csv("pseudo_facebook.tsv", sep = "\t")
pf.fc_by_age_gender <- summarise(age_groups,
mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n())
library(dplyr)
library(ggplot2)
pf.fc_by_age_gender <- summarise(age_groups,
mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n())
age_groups <- group_by(pf, age, gender)
pf.fc_by_age_gender <- summarise(age_groups,
mean_friend_count = mean(friend_count),
median_friend_count = median(friend_count),
n = n())
remove(age_groups)
yo <- read.csv('yougurt.csv')
yo <- read.csv('yogurt.csv')
str(yo)
summary(yo)
yo$id <- factor(yo$id)
str(yo)
ggplot(data = yo, aes(x = price, y = strawberry))
ggplot(data = yo, aes(x = price, y = strawberry)) +
geom_line()
ggplot(data = yo, aes(x = price, y = time)) +
geom_line()
ggplot(data = yo, aes(x = price, y = time)) +
geom_boxplot()
ggplot(data = yo, aes(x = price, y = time)) +
geom_histogram()
ggplot(data = yo, aes(x = price, y = time)) +
geom_bar()
ggplot(data = yo, aes(x = price, y = time)) +
geom_bar(stat="identity")
ggplot(data = yo, aes(y = price, x = time)) +
geom_bar(stat="identity")
qplot(data = yo, x = price, fill = I('#F79420'))
ggplot(data = yo, aes(x = price)) +
geom_histogram()
transform(yo, all.purchases = straberry + blueberry + pine.colada + plain + mixed.berry)
transform(yo, all.purchases = strawberry + blueberry + pine.colada + plain + mixed.berry)
transform(yo, all.purchases = strawberry + blueberry + pina.colada + plain + mixed.berry)
yo <- transform(yo, all.purchases = strawberry + blueberry + pina.colada + plain + mixed.berry)
qplot(x = all.purchases, data = yo, binwidth = 1, fill = I('#099DD9'))
ggplot(aes(x = all.purchases, y = price), data = yo) + geom_boxplot()
ggplot(aes(x = time, y = price), data = yo) + geom_boxplot()
ggplot(aes(x = time, y = price), data = yo) + geom_point()
set.seed(4230)
sample.ids <- sample(levels(yo$id), 16)
ggplot(aes(x = time, y = price),
data = subset(yo, id %in% sample.ids)) +
facet_wrap( ~ id) +
geom_line() +
geom_point(aes(size = all.purchases), pch = 1)
set.seed(400)
sample.ids <- sample(levels(yo$id), 16)
ggplot(aes(x = time, y = price),
data = subset(yo, id %in% sample.ids)) +
facet_wrap( ~ id) +
geom_line() +
geom_point(aes(size = all.purchases), pch = 1)
installed.packages(ggally)
installed.packages(GGally)
install.packages("GGally")
ggpairs(pf_subset[sample.init(nrow(pf_subset), 1000), ])
library(GGally)
theme_set(theme_minimal(20))
set.seed(1836)
pf_subset <- pf[, c(2:15)]
names(pf_subset)
ggpairs(pf_subset[sample.init(nrow(pf_subset), 1000), ])
ggpairs(pf_subset[sample.int(nrow(pf_subset), 1000), ])
nci <- read.table("nci.tsv")
colnames(nci) <- c(1:64)
nci.long.samp <- melt(as.matrix(nci[1:200,]))
names(nci.long.samp) <- c("gene", "case", "value")
library(reshape2)
nci.long.samp <- melt(as.matrix(nci[1:200,]))
names(nci.long.samp) <- c("gene", "case", "value")
head(nci.long.samp)
ggplot(aes(y = gene, x = case, fill = value),
data = nci.long.samp) +
geom_tile() +
scale_fill_gradientn(colours = colorRampPalette(c("blue", "red"))(100))
install.packages('RColorBrewer')
library(RColorBrewer)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
library(ggplot2)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
cuberoot_trans = function() trans_new('cuberoot',
transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
cuberoot_trans = function() trans_new('cuberoot',
transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
cuberoot_trans = function() trans_new('cuberoot',
transform = function(x) x^(1/3),
inverse = function(x) x^3)
library(gridExtra)
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter', color=clarity) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
data("diamonds")
diamonds
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter', color=diamonds$clarity) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter',
aes(color=diamonds$clarity)) +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity', reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity',
reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Clarity')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Clarity',
reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = cut), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = 'Cut',
reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Cut')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = "Color", reverse = T,
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
ggplot(aes(x = carat, y = price, color = color), data = diamonds) +
geom_point(alpha = 0.5, size = 1, position = 'jitter') +
scale_color_brewer(type = 'div',
guide = guide_legend(title = "Color",
override.aes = list(alpha = 1, size = 2))) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat and Color')
mtable(m1, m2, m3, m4, m5)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
install.package('bitops')
install.packages('bitops')
install.packages('RCurl')
library('bitops')
library('RCurl')
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
source(rawConnection(diamondsurl))
load(rawConnection(diamondsurl))
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
remove(diamondsurl)
diamondsurl = getBinaryURL("https://raw.github.com/solomonm/diamonds-data/master/BigDiamonds.Rda")
load(rawConnection(diamondsurl))
load("/home/nacho/Downloads/BigDiamonds.Rda")
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsbig)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsbig)
m2 <- update(m1, ~ . + carat)
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamondsbig)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
thisDiamond = data.frame(carat = 1.00, cut = "V.Good",
color = "I", clarity="VS1")
modelEstimate = predict(m5, newdata = thisDiamond,
interval="prediction", level = .95)
View(modelEstimate)
modelEstimate
dat = data.frame(m4$model, m4$residuals)
with(dat, sd(m4.residuals))
with(subset(dat, carat > .9 & carat < 1.1), sd(m4.residuals))
dat$resid <- as.numeric(dat$m4.residuals)
ggplot(aes(y = resid, x = round(carat, 2)), data = dat) +
geom_line(stat = "summary", fun.y = sd)
exp(modelEstimate)
load("BigDiamonds.RDa")
setwd("~/Udacity Data Analisys/Lesson 4")
load("BigDiamonds.Rda")
